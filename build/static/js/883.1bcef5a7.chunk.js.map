{"version":3,"file":"static/js/883.1bcef5a7.chunk.js","mappings":"mVAgBMA,EAASC,EAAAA,KAAaC,MAAM,CAChCC,SAAUF,EAAAA,KAAaG,SAAS,gCAA0BC,IAAI,IAAK,qBACnEC,SAAUL,EAAAA,KAAaI,IAAI,GAAI,sBAAsBD,SAAS,0BAsHhE,UAnHc,WACZ,IAAQG,GAAWC,EAAAA,EAAAA,KAAXD,OACR,GAAgCE,EAAAA,EAAAA,KAAxBC,EAAM,EAANA,OAAQC,EAAW,EAAXA,YACVC,GAAWC,EAAAA,EAAAA,MACjB,GAIIC,EAAAA,EAAAA,IAAsB,CAAEC,UAAUC,EAAAA,EAAAA,GAAYhB,GAASiB,KAAM,QAH/DC,EAAY,EAAZA,aACAC,EAAO,EAAPA,QACaC,EAAM,EAAnBC,UAAaD,OAGTE,EAAuC,yCAAG,8FAA2B,OAAlBhB,EAAQ,EAARA,SAAUH,EAAQ,EAARA,SAAQ,SAClDO,EAAO,CAAEJ,SAAAA,EAAUH,SAAAA,IAAW,OAA/CoB,EAAQ,OAEdC,EAAAA,GAAMD,EAASE,QAAU,UAAY,SAASF,EAASG,SAAQ,2CAChE,gBAJ4C,sCAW7C,OALAC,EAAAA,EAAAA,YAAU,WACJhB,GACFC,EAAS,YAEb,GAAG,CAACD,KAEF,SAAC,IAAK,CAACiB,eAAgB,SAAUC,OAAQ,QAASC,WAAW,SAASC,QAAS,UAAU,UACvF,UAAC,IAAI,CAACC,MAAO,CAAEC,SAAU,SAAU,WACjC,SAAC,IAAG,CAACJ,OAAO,OAAOK,YAAa,aAAcC,UAAU,SAASC,GAAI,EAAE,UACrE,gBACEC,UAAU,WACVC,IAAKC,EAAQ,MACb,WAAUA,EAAQ,MAClBC,IAAI,OACJR,MAAO,CAAEH,OAAQ,YAGrB,SAAC,KAAI,CAACY,QAAS,sBAAsB,UACnC,kBAAMC,SAAUxB,EAAaI,GAAaqB,aAAa,MAAK,WAC1D,UAAC,IAAK,CAACC,QAAS,EAAE,WAChB,SAAC,IAAK,CAACC,UAAWtC,EAAS,SAAW,MAAOqC,QAAS,EAAE,UACtD,SAAC,KAAU,CACTE,KAAK,WACL3B,QAASA,EACT4B,OAAQ,gBAAGC,EAAK,EAALA,MAAK,OACd,SAAC,KAAS,kBACJA,GAAK,IACTC,MAAM,aACNN,aAAa,OACbO,QAAS9B,EAAOjB,SAChBgD,WAAY/B,EAAOjB,UAAYiB,EAAOjB,SAASuB,QAC/C0B,WAAW,EACXN,KAAK,WACLO,WAAY,CACVC,gBACE,SAAC,IAAc,CAACC,SAAS,QAAO,UAC9B,SAAC,IAAiB,MAGtBZ,aAAc,UAEL,OAKnB,SAAC,IAAK,CAACE,UAAWtC,EAAS,SAAW,MAAOqC,QAAS,EAAE,UACtD,SAAC,KAAU,CACTE,KAAK,WACL3B,QAASA,EACT4B,OAAQ,gBAAGC,EAAK,EAALA,MAAK,OACd,SAAC,KAAS,kBACJA,GAAK,IACTC,MAAM,UACNN,aAAa,eACba,KAAM,WACNN,QAAS9B,EAAOd,SAChB6C,WAAY/B,EAAOd,UAAYc,EAAOd,SAASoB,QAC/C0B,WAAW,EACXC,WAAY,CACVC,gBACE,SAAC,IAAc,CAACC,SAAS,QAAO,UAC9B,SAAC,IAAgB,SAIZ,UAMrB,SAAC,IAAK,CAACX,QAAS,OAAQR,GAAI,EAAE,UAC5B,UAAC,IAAM,CAACoB,KAAK,SAASC,QAAQ,YAAW,UACtC,IAAG,sBAuBpB,C","sources":["Pages/Login.tsx"],"sourcesContent":["import { Card, Stack, Box } from \"@mui/material\"\nimport React, { useEffect } from \"react\"\n\nimport { Button, Grid, InputAdornment } from \"@mui/material\"\n\nimport { useForm, SubmitHandler, Controller } from \"react-hook-form\"\nimport { yupResolver } from \"@hookform/resolvers/yup\"\nimport * as yup from \"yup\"\nimport { TextField } from \"@mui/material\"\nimport { NewspaperOutlined, LockOpenOutlined } from \"@mui/icons-material\"\nimport { toast } from \"react-toastify\"\nimport { ILoginFields } from \"../Types/form.type\"\nimport { useMobile } from \"../Provider/Theme/Mobile\"\nimport { useAuth } from \"../Provider/Auth/Auth\"\nimport { useNavigate } from \"react-router-dom\"\n\nconst schema = yup.object().shape({\n  username: yup.string().required(\"Username é obrigatório\").max(100, \"Nome muito grande\"),\n  password: yup.string().max(20, \"Senha Muito grande\").required(\"Senha obrigatória\"),\n})\n\nconst Login = () => {\n  const { mobile } = useMobile()\n  const { signIn, accessToken } = useAuth()\n  const navigate = useNavigate()\n  const {\n    handleSubmit,\n    control,\n    formState: { errors },\n  } = useForm<ILoginFields>({ resolver: yupResolver(schema), mode: \"all\" })\n\n  const submitForm: SubmitHandler<ILoginFields> = async ({ password, username }: ILoginFields) => {\n    const response = await signIn({ password, username })\n\n    toast[response.success ? \"success\" : \"error\"](response.message)\n  }\n\n  useEffect(() => {\n    if (accessToken) {\n      navigate(\"/calendar\")\n    }\n  }, [accessToken])\n  return (\n    <Stack justifyContent={\"center\"} height={\"100vh\"} alignItems=\"center\" bgcolor={\"#DDDDDD\"}>\n      <Card style={{ maxWidth: \"500px\" }}>\n        <Box height=\"80px\" justifySelf={\"flex-start\"} textAlign=\"center\" mt={2}>\n          <img\n            className=\"lazyload\"\n            src={require(\"../assets/low-logo.webp\")}\n            data-src={require(\"../assets/images/logo.png\")}\n            alt=\"logo\"\n            style={{ height: \"90%\" }}\n          />\n        </Box>\n        <Grid padding={\"16px 64px 64px 64px\"}>\n          <form onSubmit={handleSubmit(submitForm)} autoComplete=\"off\">\n            <Stack spacing={3}>\n              <Stack direction={mobile ? \"column\" : \"row\"} spacing={2}>\n                <Controller\n                  name=\"username\"\n                  control={control}\n                  render={({ field }) => (\n                    <TextField\n                      {...field}\n                      label=\"Username *\"\n                      autoComplete=\"nope\"\n                      error={!!errors.username}\n                      helperText={errors.username && errors.username.message}\n                      fullWidth={true}\n                      name=\"username\"\n                      InputProps={{\n                        startAdornment: (\n                          <InputAdornment position=\"start\">\n                            <NewspaperOutlined />\n                          </InputAdornment>\n                        ),\n                        autoComplete: \"nope\",\n                      }}\n                    ></TextField>\n                  )}\n                />\n              </Stack>\n\n              <Stack direction={mobile ? \"column\" : \"row\"} spacing={2}>\n                <Controller\n                  name=\"password\"\n                  control={control}\n                  render={({ field }) => (\n                    <TextField\n                      {...field}\n                      label=\"Senha *\"\n                      autoComplete=\"new-password\"\n                      type={\"password\"}\n                      error={!!errors.password}\n                      helperText={errors.password && errors.password.message}\n                      fullWidth={true}\n                      InputProps={{\n                        startAdornment: (\n                          <InputAdornment position=\"start\">\n                            <LockOpenOutlined />\n                          </InputAdornment>\n                        ),\n                      }}\n                    ></TextField>\n                  )}\n                />\n              </Stack>\n            </Stack>\n\n            <Stack spacing={\"10px\"} mt={3}>\n              <Button type=\"submit\" variant=\"contained\">\n                {\" \"}\n                Login\n              </Button>\n            </Stack>\n\n            {/* <Stack mt={3} fontSize={12} direction=\"row\">\n              Não tem cadastro faça seu &nbsp;\n              <Link\n                underline=\"none\"\n                onClick={() => navigate(\"/signup\")}\n                component=\"button\"\n                color={\"#EB3136\"}\n                fontSize={12}\n                fontWeight={800}\n              >\n                CADASTRO\n              </Link>\n            </Stack> */}\n          </form>\n        </Grid>\n      </Card>\n    </Stack>\n  )\n}\n\nexport default Login\n"],"names":["schema","yup","shape","username","required","max","password","mobile","useMobile","useAuth","signIn","accessToken","navigate","useNavigate","useForm","resolver","yupResolver","mode","handleSubmit","control","errors","formState","submitForm","response","toast","success","message","useEffect","justifyContent","height","alignItems","bgcolor","style","maxWidth","justifySelf","textAlign","mt","className","src","require","alt","padding","onSubmit","autoComplete","spacing","direction","name","render","field","label","error","helperText","fullWidth","InputProps","startAdornment","position","type","variant"],"sourceRoot":""}